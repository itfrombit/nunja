#!/usr/local/bin/nush

(load "Nunja")

;; @class NSDate
;; @discussion Extensions for Nunja.
(class NSDate
     
     ;; Get an RFC822-compliant representation of a date.
     (- (id) rfc822 is
        (set result ((NSMutableString alloc) init))
        (result appendString:
                (self descriptionWithCalendarFormat:"%a, %d %b %Y %H:%M:%S "
                      timeZone:(NSTimeZone localTimeZone) locale:nil))
        (result appendString:((NSTimeZone localTimeZone) abbreviation))
        result)
     
     ;; Get an RFC1123-compliant representation of a date.
     (- (id) rfc1123 is
        (set result ((NSMutableString alloc) init))
        (result appendString:
                (self descriptionWithCalendarFormat:"%a, %d %b %Y %H:%M:%S "
                      timeZone:(NSTimeZone timeZoneWithName:"GMT") locale:nil))
        (result appendString:((NSTimeZone timeZoneWithName:"GMT") abbreviation))
        result))

(class NunjaRequest
     (ivar (id) cookies)
     
     (- (id) cookies is
        (unless @cookies
                (set @cookies
                     (if (set cookies ((self requestHeaders) objectForKey:"Cookie"))
                         (then (set cookieDictionary (dict))
                               ((cookies componentsSeparatedByString:";") each:
                                (do (cookieDescription)
                                    (if (set match (cookie-pattern findInString:cookieDescription))
                                        (cookieDictionary setObject:(match groupAtIndex:2)
                                             forKey:(match groupAtIndex:1)))))
                               cookieDictionary)
                         (else (dict)))))
        @cookies)
     
     (- (id) post is
	(NSLog "body is")
	(NSLog ((NSString alloc) initWithData:(self body) encoding:NSUTF8StringEncoding))
        (set d (((NSString alloc) initWithData:(self body) encoding:NSUTF8StringEncoding) urlQueryDictionary))
        (NSLog (d description))
        d))

(global random  (NuBridgedFunction functionWithName:"random" signature:"l"))
(global srandom (NuBridgedFunction functionWithName:"srandom" signature:"vI"))

;; use this pattern to extract a cookie from a header
(set cookie-pattern (regex -"[ ]*([^=]*)=(.*)"))

;; @class NunjaCookie
;; @discussion A class for managing user-identifying cookies.
(class NunjaCookie is NSObject
     (ivars)
     (ivar-accessors)
     
     ;; Generate a random identifier for use in a cookie.
     (+ (id) randomIdentifier is
        "#{((random) stringValue)}#{((random) stringValue)}#{((random) stringValue)}#{((random) stringValue)}")
     
     ;; Construct a cookie for a specified user.
     (+ (id) cookieForUser:(id) user is
        ((self alloc) initWithUser:user
         value:(self randomIdentifier)
         expiration:(NSDate dateWithTimeIntervalSinceNow:3600)))
     
     ;; Initialize a cookie for a specified user.
     (- (id) initWithUser:(id) user value:(id) value expiration:(id) expiration is
        (super init)
        (set @name "session")
        (set @user user)
        (set @value value)
        (set @expiration expiration)
        (set @stringValue nil)
        self)
     
     ;; Get a string description of a cookie.
     (- (id) description is
        "cookie=#{@name} value=#{@value} user=#{@user} expiration=#{(@expiration rfc822)}")
     
     ;; Get a string value for a cookie suitable for inclusion in a response header.
     (- (id) stringValue is "#{@name}=#{@value}; Expires:#{(@expiration rfc1123)}; Path=/"))

;; An HTTP request handler. Handlers consist of an action, a pattern, and a set of statements.
;; The action is an HTTP verb such as "get" or "post", the pattern is either an NSString
;; or a NuRegex, and the statements are Nu expressions to be evaluated in the request handling.
;; Request handers are typically created using the "get" or "post" macros and are responsible
;; for setting the response headers and returning the appropriate response data, which can be
;; either raw data (in an NSData object) or a string containing HTML text.
(class NunjaRequestHandler is NSObject
     (ivar (id) action (id) pattern (id) statements)
     (ivars)
     (ivar-accessors)
     
	(- (void) setValue:(id) value forKey:(id) key is
		(NSLog "this should not get called")
		(NSLog "#{key}: #{value}"))

     ;; Create a handler with a specified action, pattern, and statements. Used internally.
     (+ (id) handlerWithAction:(id)action pattern:(id)pattern statements:(id)statements is
        (set handler ((self alloc) init))
        ;(handler set:(action:action pattern:pattern statements:(cons 'progn statements)))
        (handler setAction:action)
        (handler setPattern:pattern)
	(handler setStatements:(cons 'progn statements))
        handler)
     
     ;; Try to match the handler against a specified action and path. Used internally.
     (- (id)matchAction:(id)action path:(id)path is
        (if (eq @action action)
            (then (cond ((@pattern isKindOfClass:NSString)
                         (set @match (eq @pattern path)))
                        ((@pattern isKindOfClass:NuRegex)
                         (set @match (@pattern findInString:path))
                         (eq path (@match group)))
                        (else nil)))
            (else nil)))
     
     ;; Handle a request. Used internally.
     (- (id)handleRequest:(id)request is
        (NSLog "handling request #{(request uri)}")
        (set response (dict))
        (set HEAD nil)
        (set TITLE nil)
        (set BODY (eval @statements))
        (if (BODY isKindOfClass:NSString)
            (then (set html "<head>\n")
                  (if HEAD (html appendString:HEAD))
                  (if TITLE (html appendString:(+ "<title>" TITLE "</title>")))
                  (html appendString: (+ "</head>\n<body>\n" BODY "</body>\n"))
                  (request respondWithString:html))
            (else (request respondWithData:BODY))))
     
     ;; Return a response redirecting the client to a new location.  This method may be called from action handlers.
     (- (id)redirectResponse:(id)request toLocation:(id)location is
        (request setValue:location forResponseHeader:"Location")
        (request respondWithCode:303 message:"redirecting" string:"redirecting")))

;; Declare a get action.
(macro get
     (set __pattern    (eval (car margs)))
     (set __statements (cdr margs))
     ($handlers << (NunjaRequestHandler handlerWithAction:"GET" pattern:__pattern statements:__statements)))

;; Declare a post action.
(macro post
     (set __pattern    (eval (car margs)))
     (set __statements (cdr margs))
     ($handlers << (NunjaRequestHandler handlerWithAction:"POST" pattern:__pattern statements:__statements)))

(set $handlers (array))

;; global variables
(set $sessionCookies (dict))
(set $friends (array))

;; front page.
(get "/"
     (set sessionCookieName ((request cookies) "session"))
     (set sessionCookie (if sessionCookieName (then ($sessionCookies sessionCookieName)) (else nil)))
     (set user (sessionCookie user))
     
     (set TITLE "Friends")
     (set template <<-TEMPLATE
<h1>Hello!</h1>
<p>Let's make a list.</p>
<% (if user (then %>
<h2>Your friends</h2>
<ul>
<% ($friends each: (do (friend) %>
<% (set deletion ((dict "name" (friend "name")) urlQueryString)) %>
<li><%= (friend "name") %> (<%= (friend "email") %>) (<a href="/delete?<%= deletion %>">X</a>)</li>
<% )) %>
<li><a href="/addfriend">Add a friend</a></li>
</ul>
<hr/>
<p>You are logged in as <%= user %>. <a href="/logout">Log out.</a></p>
<% ) (else %>
<form action="/login" method="post">
<p>First, please sign in.</p>
<label for="username">username: </label> <input type="text" name="username"/><br/>
<label for="password">password: </label> <input type="password" name="password"/><br/>
<input type="submit" value="Submit" />
</form>
<% )) %>
TEMPLATE)
     (eval (NuTemplate codeForString:template)))

;; login page.
(get "/login"
     (set TITLE "Log in")
     <<-HTML
<form action="/login" method="post">
<p>Please sign in.</p>
<label for="username">username: </label> <input type="text" name="username"/><br/>
<label for="password">password: </label> <input type="password" name="password"/><br/>
<input type="submit" value="Submit" />
</form>	
HTML)

;; login POST handler.
(post "/login"
      (set post (request post))
      (if (eq (post "response") "Cancel")
          (then
               (self redirectResponse:request toLocation:"/"))
          (else
               (set username (post "username"))
               (set password (post "password"))
               (if (and (> (username length) 0) (eq username password))
                   (then
                        (set sessionCookie (NunjaCookie cookieForUser:username))
                        ($sessionCookies setObject:sessionCookie forKey:(sessionCookie value))
                        (request setValue:(sessionCookie stringValue) forResponseHeader:"Set-Cookie")
                        (self redirectResponse:request toLocation:"/"))
                   (else
                        (set TITLE "Please try again")
                        <<-HTML
<p>Invalid Password.  Your password is your username.</p>
<form action="/login" method="post">
<label for="username">username: </label> <input type="text" name="username"/><br/>
<label for="password">password: </label> <input type="password" name="password"/><br/>
<input type="submit" name="response" value="Submit" />
<input type="submit" name="response" value="Cancel" />
</form>	
			HTML)))))

;; logout, also with a GET. In the real world, we would prefer a POST.
(get "/logout"
     (set sessionCookieName ((request cookies) "session"))
     (if sessionCookieName ($sessionCookies removeObjectForKey:sessionCookieName))
     (self redirectResponse:request toLocation:"/"))

;; add-a-friend page.
(get "/addfriend"
     (set TITLE "Add a friend")
     <<-HTML
<h1>Add a friend</h1>
<form action="/addfriend" method="post">
<p>
<label for="name">name: </label><input type="text" name="name"/><br/>
<label for="email">email: </labellabel><input type="text" name="email"/><br/>
<input type="submit" name="response" value="Submit" />         
<input type="submit" name="response" value="Cancel"/>
</p>
</form>
HTML)

;; add-a-friend POST handler.
(post "/addfriend"
      (set post (request post))
      (if (eq (post "response") "Submit")
          ($friends << (dict name:(post "name") email:(post "email"))))
      (self redirectResponse:request toLocation:"/"))

;; delete-a-friend with a GET. Strictly, this should be a post, but we use a get to show how it would be done.
(get /^\/delete\?(.*)/
     (set post ((@match groupAtIndex:1) urlQueryDictionary))
     (set $friends ($friends select:(do (friend) (!= (friend "name") (post "name")))))
     (self redirectResponse:request toLocation:"/"))

(get "/about" <<-END
<h1>About this site</h1>
<p>It is running on Nunja!</p>
END)

(get "/favicon.ico"
     (request setValue:"image/x-icon" forResponseHeader:"Content-Type")
     (NSData dataWithContentsOfFile:"public/favicon.ico"))

(class NunjaDelegate is NSObject
     (- (void) handleRequest:(id) request is
        (set path (request uri))
        (set command (request command))
        (NSLog (+ "REQUEST " command " " path "-----"))
        (NSLog ((request requestHeaders) description))
        (request setValue:"Nunja" forResponseHeader:"Server")
        
        (set matches ($handlers select:(do (handler) (handler matchAction:command path:path))))
        (if (matches count)
            (then ((matches 0) handleRequest:request))
            (else
                 (puts ((NSString alloc) initWithData:(request body) encoding:NSUTF8StringEncoding))
                 (request respondWithCode:404 message:"Not Found" string:"Not Found. You said: #{command} #{path}")))))

(set n ((Nunja alloc) init))
(n bindToAddress:"0.0.0.0" port:3000)
(n setDelegate:((NunjaDelegate alloc) init))
(n run)
